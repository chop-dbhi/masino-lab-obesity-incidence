{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 library('RPostgreSQL')\
library(getPass)\
library(sqldf)\
library(data.table)\
library(e1071)\
pg = dbDriver("PostgreSQL")\
con = dbConnect(pg, user="campbelle2", password=getPass::getPass(), host="reslnpbddb01.research.chop.edu",\
                port=5432, dbname="pbd_cohort")\
\
measures = "WITH ms_dates as\
(SELECT ps1.person_id, ms1.measurement_date, ms1.visit_occurrence_id, ms1.value_as_number\
FROM chop_pbd_v27.person ps1  JOIN chop_pbd_v27.measurement_anthro ms1 ON ps1.person_id = ms1.person_id\
WHERE ms1.measurement_concept_id = 2000000043 AND DATE (ms1.measurement_date) > '12/31/2008'AND DATE (ms1.measurement_date) < '01/01/2017'\
AND ms1.measurement_date  - make_date(ps1.year_of_birth, ps1.month_of_birth, ps1.day_of_birth) >= (2*365)\
AND ms1.measurement_date  - make_date(ps1.year_of_birth, ps1.month_of_birth, ps1.day_of_birth) <= (18*365)\
AND  DATE (ms1.measurement_date) > DATE (concat_ws('-', ps1.year_of_birth, ps1.month_of_birth, ps1.day_of_birth ))),\
\
z_scores AS\
(SELECT person_id, MAX(value_as_number) AS max_z_score, MIN(value_as_number) AS min_z_score\
FROM ms_dates\
GROUP BY (person_id)\
)\
\
SELECT person_id, max_z_score, min_z_score\
FROM z_scores\
WHERE max_z_score < 1.036 and min_z_score > -1.645 \
;\
"\
\
person_data = "SELECT ps1.person_id, ps1.gender_concept_id, ms1.measurement_date, ms1.visit_occurrence_id, ms1.value_as_number, make_date(ps1.year_of_birth, ps1.month_of_birth, ps1.day_of_birth) as birthday\
FROM chop_pbd_v27.person ps1  JOIN chop_pbd_v27.measurement_anthro ms1 ON ps1.person_id = ms1.person_id\
WHERE ms1.measurement_concept_id = 2000000043 AND DATE (ms1.measurement_date) > '12/31/2008'AND DATE (ms1.measurement_date) < '01/01/2017'\
AND ms1.measurement_date  - make_date(ps1.year_of_birth, ps1.month_of_birth, ps1.day_of_birth) >= (2*365)\
AND ms1.measurement_date  - make_date(ps1.year_of_birth, ps1.month_of_birth, ps1.day_of_birth) <= (18*365)\
AND  DATE (ms1.measurement_date) > DATE (concat_ws('-', ps1.year_of_birth, ps1.month_of_birth, ps1.day_of_birth ))"\
\
\
##I need to revise this to being condition start dates\
visit_type= "SELECT person_id, visit_concept_id, visit_start_date, visit_occurrence_id FROM chop_pbd_v27.visit_occurrence"\
\
condition_start = "SELECT ps1.person_id, ms1.condition_start_date, ms1.visit_occurrence_id\
FROM chop_pbd_v27.person ps1  JOIN chop_pbd_v27.condition_occurrence ms1 ON ps1.person_id = ms1.person_id\
WHERE DATE (ms1.condition_start_date) > '12/31/2004' AND DATE (ms1.condition_start_date) < '01/01/2017'\
AND  DATE (ms1.condition_start_date) > DATE (concat_ws('-', ps1.year_of_birth, ps1.month_of_birth, ps1.day_of_birth ))\
"\
\
#make_date(ps1.year_of_birth, ps1.month_of_birth, ps1.day_of_birth) as birthday,\
\
\
measures <- dbGetQuery(con, measures)\
person_data <- dbGetQuery(con, person_data)\
visit_data <- dbGetQuery(con, visit_type)\
condition_data <- dbGetQuery(con, condition_start)\
\
data(measures)\
data(person_data)\
data(visit_data)\
setDT(measures)\
setDT(person_data)\
setDT(visit_data)\
setDT(condition_data)\
\
control_pool <- person_data[person_id %in% measures$person_id]\
store_control_pool <- setDT(control_pool)\
\
##Measures must have been from visits with a clinical observation\
control_pool <- control_pool[visit_occurrence_id %in% conditions2$visit_occurrence_id]\
condition_data <- condition_data[visit_occurrence_id %in% conditions2$visit_occurrence_id]\
control_pool <- control_pool[,c(1,2,6)]\
control_pool <- control_pool[order(person_id)]\
control_pool <- control_pool[!duplicated(control_pool), ]\
\
control_pool3 <- condition_data[person_id %in% measures$person_id]\
control_pool3 <- control_pool3[visit_occurrence_id %in% visit_data[visit_concept_id %in% c(9201, 9202, 9203)]$visit_occurrence_id]\
\
setDT(control_pool3)\
control_pool3 <- control_pool3[person_id %in% control_pool$person_id]\
\
control_pool4 <- control_pool3[,c(1,2)]\
control_pool4 <- control_pool4[order(person_id, condition_start_date)]\
control_pool4 <- control_pool4[!duplicated(control_pool4), ]\
\
measure_control_dates <-control_pool4[order(person_id, condition_start_date)]\
measure_control_dates[, num_of_prior_visits := seq(1, nrow(.SD)) - 1, by = person_id]\
\
##The F table is actually where all the info for the matched controls is stored\
\
f <-  merge(control_pool, measure_control_dates, on = person_id)\
f$index_age<- difftime(f$condition_start_date, f$birthday, units = c("days"))\
f <- f[, gender := as.factor(gender_concept_id)]\
\
control_population2 <- f[,c(1,7,6,5)]\
control_population2 <- control_population2[, index_age := as.numeric(index_age)]\
control_population2$casecont = 'cont'\
View(control_population2)\
\
control_population2[,.N,by=person_id]\
write.csv(control_population2, 'control_population.csv')\
\
#Additional \
\
case_clean = read.csv('~/case_population.csv')\
control_clean = read.csv('~/control_population.csv')\
setDT(case_clean)\
setDT(control_clean)\
\
View(case_clean)\
View(control_clean)\
\
control_clean <- control_clean[,c(2,3,4,5,6)]\
\
##First, drop and num_of_prior_visits=0 from control\
control_clean = control_clean[!control_clean$num_of_prior_visits==0,]\
\
##Eliminate controls who are too young (more than 180 days younger than the youngest case)\
control_clean <- subset(control_clean, index_age>=550, \
                        select=c(person_id, gender, index_age, num_of_prior_visits, casecont))\
\
##Eliminate controls who are too old (more than 180 days older than the oldest case)\
control_clean <- subset(control_clean, index_age<6750, \
                        select=c(person_id, gender, index_age, num_of_prior_visits, casecont))\
\
##Eliminate controls with too many prior visits\
control_clean <- subset(control_clean, num_of_prior_visits<=350, \
select=c(person_id, gender, index_age, num_of_prior_visits, casecont))\
\
write.csv(control_clean, 'control_population3.csv')\
}